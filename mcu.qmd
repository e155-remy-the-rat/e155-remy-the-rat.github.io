---
title: "MCU Design Details"
---

## General Overview
This project uses two MCUs to handle both the reading of IMU data and the transmission of state information. The first MCU on the chef jacket reads acceleration and gyroscope data from the 2 IMUs mounted on the userâ€™s arms through I2C. It also processes the data to then extrapolate state information for the arm movements. Lastly, this IMU writes state data through SPI to the first RF module to then transmit to the second RF module. 

The second MCU reads data from the second RF module to receive state information for the movement of the arms. This MCU then sends the state information to the FPGA through GPIO.

- **Input**
  - Receives signals from the IMU via I2C:  a new feature for processing IMU signals.

- **Processing**
    - Processes IMU data (also new!) to:
    - Determine motor actions. 
    - Decide the state to be transmitted.

- **Output**
  - Sends signals or states to the RF chip via SPI. (also new!!)

## IMU Integration

## RF Communication 
This project uses one MCU to write the collected IMU data to one nRF module as the transceiver, and then use on MCU to read data from the second nRF module as the receiver.

The following details the process that is needed to correctly configure and use the transciever and reciever RF modules.

- **Transmit**
	-	Set the address/address width
	-	Initialize RF characteristics (rf frequency, datarate)
	-	Write data to TX FIFO (automatically sent out once TX mode turned on)
	-	Turn on TX mode by configuring mode and CS pin
	-	Data has been sent once TX_DS interrupt/flag is set
	-	Clear interrupts

- **Receive**
	-	Set address/address width
	-	Initialize RF characteristics
	-	Turn on RX mode by configuring mode and CS pin
	-	Wait until data is in RX FIFO
	-	Data has been received once RX_DR interrupt/flag is set
	-	Save data from RX FIFO
	-	Clear interrupts


This was a difficult task because none of the open source libraries we found worked for the MCU-nRF duo. To implement recieving and transcieving functionality, we adapted an existing public [library](https://github.com/LonelyWolf/stm32/blob/master/nrf24l01/README.MD). 

main.c, nrf24.c, and nrf24_hal.c in the MCU code (which can be found on the Github) are the additional files that were written in addition to the SPI/RCC/GPIO files provided from MicroPs labs. nrf24.c includes all the functions needed to configure the transciever and reciever, specific to the nRF board we are using. nrf24_hal.c (hal = hardware abstraction layer) includes all the functions needed to configure the SPI send-recieve commands. 

## MCU Code Setup

The RF portions of the main_head.c, main_body.c, and main.c file put together the different commands from nrf24.c and nrf24_hal.c in the correct sequence for transcieving and recieving. main_head.c contains just the reciever code and only uses the RX() function. main_body.c includes the code needed to process IMU angle information and assign states, as well as the transciever code TX() to transmit said states. These can be called in main.c as needed to flash respective MCUs.

The following diagram shows a flow of events that occur in the while loop of main for both MCUs. 

![Flow Diagram for MCU code](mcuflow.jpg)


